#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include<string.h>
#include <stdlib.h>

#define MAX_LINE_SIZE 1024

#define DATOTEKA_SE_NIJE_OTVORILA -1
#define MEMORIJA_NEUSPJESNO_ALOCIRANA -1

#define USPJESAN_UNOS 1
#define USPJESAN_ISPIS 1

typedef struct cvor* poz;

typedef struct cvor{
    float el;
    poz next;
}cvor;

int citajDatoteku(char[],poz);

int Push(float,poz);
float Pop(poz);


int main()
{
    return 0;
}

int citajDatoteku(char ime_datoteke[], poz head)
{
    FILE* fp=NULL;
    int n=0;
    char buffer[MAX_LINE_SIZE]={0};

    fp=fopen(ime_datoteke,"r");

    if (fp==NULL)
    {
        printf("Datoteka se nije otvorila.");
        return DATOTEKA_SE_NIJE_OTVORILA;
    }

    while (!feof(fp))
    {
        fscanf(fp,"%s",buffer);

        if((sscanf(buffer,"%d",&n))==1)
        {
            Push((float)n,head);
        }

        else{

            switch ('n')
            {
            case /* constant-expression */:
                /* code */
                break;
            
            default:
                break;
            }
        }

    }


}

int Push(float x, poz head)
{
    poz q=NULL;
    q = (poz) malloc(sizeof(cvor));

    if (q==NULL)
    {
        printf("Neuspjesno alocirana memorija.");
        return MEMORIJA_NEUSPJESNO_ALOCIRANA;
    }

    q->el=x;
    q->next=head->next;
    head->next=q;

    return USPJESAN_UNOS;
}

float Pop(poz head){
    poz temp=NULL;
    float pom=0.0;
    pom = head->next->el;

    temp=head->next;
    head->next=temp->next;
    free(temp);

    return pom;
}
