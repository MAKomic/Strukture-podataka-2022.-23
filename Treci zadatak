#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
#include<string.h>

#define MAX_STRING_LENGTH 1024
#define NEMA_ELEMENTA_U_LISTI -1
#define USPJESNO_BRISANJE 1
#define USPJESAN_ISPIS 1
#define USPJESAN_UNOS 1




typedef struct osoba {
	char ime[MAX_STRING_LENGTH];
	char prezime[MAX_STRING_LENGTH];
	int godrod;

}osoba;

typedef struct cvor* poz;

typedef struct cvor {
	osoba el;
	poz next;
}cvor;

int unosP(osoba, poz);
int ispis(poz);
int unosK(osoba, poz);
poz trazi(char[], poz);
int brisi(char[], poz);
poz traziP(char[], poz);
int unosIza(osoba, osoba, poz);
int unosIspred(osoba, osoba, poz);
osoba unosOsobe();




int main()
{
	cvor head;
	head.next = NULL;
	char proizvoljno_prezime[MAX_STRING_LENGTH] = { 0 };

	unosP(unosOsobe(), &head);
	unosK(unosOsobe(), &head);
	unosP(unosOsobe(), &head);
	unosP(unosOsobe(), &head);
	unosK(unosOsobe(), &head);
	ispis(head.next);

	printf("\nUnesi prezime koje zelis pronac: ");
	scanf(" %s", proizvoljno_prezime);
	printf("Adresa elementa sa prezimenom %s je %p\n", proizvoljno_prezime, trazi(proizvoljno_prezime, head.next));
	
	printf("Unesi prezime koje zelis izbrisat: ");
	scanf(" %s", proizvoljno_prezime);
	brisi(proizvoljno_prezime, &head);
	printf("\n");
	ispis(head.next);

	unosIza(unosOsobe(), unosOsobe(), poz);
	unosIspred(unosOsobe(), unosOsobe(), poz);


	return 0;
}

int unosP(osoba x, poz poz_head)
{
	poz q=NULL;

	q = (poz)malloc(sizeof(cvor));

	q->el = x;
	q->next = poz_head->next;
	poz_head->next = q;

	return USPJESAN_UNOS;
}

int ispis(poz poz_prvog)
{
	while (poz_prvog != NULL)
	{
		printf("%s %s %d\n", poz_prvog->el.ime, poz_prvog->el.prezime, poz_prvog->el.godrod);
		poz_prvog = poz_prvog->next;
	}
	return USPJESAN_ISPIS;
}

int unosK(osoba x, poz poz_head)
{
	poz q=NULL;

	q = (poz)malloc(sizeof(cvor));

	while (poz_head->next != NULL)
	{
		poz_head = poz_head->next;
	}

	q->el = x;
	poz_head->next = q;
	q->next = NULL;

	return USPJESAN_UNOS;
}

poz trazi(char prez[], poz poz_head)
{
	while (poz_head != NULL && (strcmp(poz_head->el.prezime, prez)) != 0)
	{
		poz_head = poz_head->next;
	}

	return poz_head;
}

int brisi(char prez[], poz poz_head)
{
	poz prev=NULL, temp=NULL;
	prev = traziP(prez, poz_head);

	if (prev == NULL)
	{
		printf("Nema ga!");
		return NEMA_ELEMENTA_U_LISTI;
	}

	else
	{
		temp = prev->next;
		prev->next = temp->next;

		return USPJESNO_BRISANJE;
		free(temp);
	}
}

poz traziP(char prez[], poz poz_head)
{
	poz pret=NULL;
	pret = poz_head;
	poz_head = poz_head->next;

	while (poz_head != NULL && (strcmp(poz_head->el.prezime, prez)) != 0)
	{
		pret = pret->next;
		poz_head = poz_head->next;
	}

	if (poz_head == NULL)
	{
		return NULL;
	}

	else
	{
		return pret;
	}
}

int unosIza(osoba x, osoba y, poz poz_prvog)
{
	poz q=NULL;

	q = (poz)malloc(sizeof(cvor));

	poz_prvog=trazi(y.ime, poz_prvog);

	if (poz_prvog == NULL)
	{
		printf("Greska! Element ne postoji u vezanoj listi!\n");
		return NEMA_ELEMENTA_U_LISTI;
	}

	else
	{
		q->next = poz_prvog->next;
		poz_prvog->next = q;
		return USPJESAN_UNOS;
	}
}

int UnosIspred(osoba x, osoba y, poz poz_head)
{
	poz q = NULL;

	q = (poz)malloc(sizeof(cvor));

	poz_head = traziP(y.prezime, poz_head);

	if (poz_head->next == NULL)
	{
		printf("Greska! Element ne postoji u vezanoj listi!\n");
		return NEMA_ELEMENTA_U_LISTI;
	}

	else
	{
		q->el = x;
		return USPJESAN_UNOS;
	}

}

osoba unosOsobe()
{
	osoba o;
	o.ime[MAX_STRING_LENGTH] = { 0 };
	o.prezime[MAX_STRING_LENGTH] = { 0 };
	o.godrod = 0;

	printf("Unesi ime osobe: ");
	scanf("%s", o.ime);

	printf("Unesi prezime osobe: ");
	scanf("%s", o.prezime);

	printf("Unesi godinu rodenja osobe: ");
	scanf("%d", &(o.godrod));

	return o;
}
