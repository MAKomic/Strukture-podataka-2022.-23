#define _CRT_SECURE_NO_WARNINGS

#include<stdio.h>
#include<string.h>
#include<stdlib.h>

#define MAX_LINE_SIZE 1024

#define DATOTEKA_SE_NIJE_OTVORILA -1
#define MEMORIJA_NEUSPJESNO_ALOCIRANA -1

typedef struct clan{
    int k;
    int exp;
}clan;

typedef struct cvor* poz;

typedef struct cvor{
    clan el;
    poz next;
}cvor;

int sortiraniUnos(clan x,poz head);
int zbrojiPolinome(poz head1,poz head2, poz head3);

int main()
{
    cvor head1, head2, head3, head4;
	head1.next = NULL;
    head2.next = NULL;
    head3.next = NULL;
    head4.next = NULL;
    clan x;
    x.k=0;
    x.exp=0;
    int n=0;


    FILE *fp=NULL;
    char ime_datoteke[MAX_LINE_SIZE]={0};

    fp = fopen(ime_datoteke, "r");
	if (fp == NULL)
	{
		printf("Datoteka se nije otvorila.");
		fclose(fp);
		return DATOTEKA_SE_NIJE_OTVORILA;
	}

    char buffer[MAX_LINE_SIZE]={0};
    char *p=buffer;

    fgets(buffer,MAX_LINE_SIZE,fp);

    while(strlen(p)>0)
    {
        sscanf(p,"%d %d %n",&(x.k),&(x.exp),&n);
        sortiraniUnos(x,&head1);
        p+=n;

    }

    fgets(buffer,MAX_LINE_SIZE,fp);
    
    while(strlen(p)>0)
    {
        sscanf(p,"%d %d %n",&(x.k),&(x.exp),&n);
        sortiraniUnos(x,&head2);
        p+=n;

    }



    return 0;
}

int zbrojiPolinome(poz head1,poz head2, poz head3)
{
    while(head1 !=NULL && head2 != NULL)
    {
        if(head1->el.exp<head2->el.exp)
        {
            //unosnakraj
        }
    }
}
int sortiraniUnos(clan x,poz head)
{
    poz q=NULL;
    q=(poz)malloc(sizeof(cvor));

	if (q == NULL)
	{
		printf("Neuspjesno alocirana memorija.");
		return MEMORIJA_NEUSPJESNO_ALOCIRANA;
	}

    while(head->next!=NULL && head->next->el.exp<x.exp)
    {
        head=head->next;
    }

    if(head->next->el.exp==x.exp)
    {
        head->next->el.k+=x.k;
        if (head->next->el.k==0)
        {
            //brisi
        }
    }

    q->el=x;
    q->next=head->next;
    head->next=q;

}
